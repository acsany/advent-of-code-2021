import pathlib
import pytest
import aoc as aoc

PUZZLE_DIR = pathlib.Path(__file__).parent


@pytest.fixture
def example1():
    puzzle_input = (PUZZLE_DIR / "example1.txt").read_text().strip()
    return aoc.parse(puzzle_input)


@pytest.fixture
def example2():
    puzzle_input = (PUZZLE_DIR / "example2.txt").read_text().strip()
    return aoc.parse(puzzle_input)


def test_parse_example1(example1):
    """Test that input is parsed properly"""
    assert len(example1) > 0
    assert example1 == [
        "0,9 -> 5,9",
        "8,0 -> 0,8",
        "9,4 -> 3,4",
        "2,2 -> 2,1",
        "7,0 -> 7,4",
        "6,4 -> 2,0",
        "0,9 -> 2,9",
        "3,4 -> 1,4",
        "0,0 -> 8,8",
        "5,5 -> 8,2",
    ]

def test_get_coordinates(example1):
    coordinates = [
        [0,9,5,9],
        [8,0,0,8],
        [9,4,3,4],
        [2,2,2,1],
        [7,0,7,4],
        [6,4,2,0],
        [0,9,2,9],
        [3,4,1,4],
        [0,0,8,8],
        [5,5,8,2],
    ]
    assert aoc.convert_to_coordinates(example1) == coordinates

def test_line():
    h_line_in = [1,1,1,3]
    h_line = [
        (1,1),
        (1,2),
        (1,3),
    ]

    v_line_in = [9,7,7,7]
    v_line = [
        (9,7),
        (8,7),
        (7,7),
    ]

    assert aoc.get_line_coords(h_line_in) == h_line
    assert aoc.get_line_coords(v_line_in) == v_line

def test_diagonal_line_coords():
    l = [8,0,0,8]
    l_diag = [
        (8,0),
        (7,1),
        (6,2),
        (5,3),
        (4,4),
        (3,5),
        (2,6),
        (1,7),
        (0,8),
    ]
    assert aoc.get_line_coords(l) == l_diag

def test_max_coords():
    coordinates = [
        [0,9,5,9],
        [8,0,0,8],
        [9,4,3,4],
        [2,2,2,1],
        [7,0,7,4],
        [6,4,2,0],
        [0,9,2,9],
        [3,4,1,4],
        [0,0,8,8],
        [5,5,8,2],
    ]
    assert aoc.get_max_coords(coordinates) == (9,9)

def test_get_field():

    # 10x8 field
    # generated by max_x = 9, max_y = 7
    field = [
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
    ]

    assert aoc.get_field(9,7) == field

def test_empty_field(example1):
    coordinates = aoc.convert_to_coordinates(example1)
    max_x, max_y = aoc.get_max_coords(coordinates)
    field = aoc.get_field(max_x, max_y)
    field_drawn = [
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
    ]

    assert field == field_drawn

def test_draw_line():
    field = [
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0],
    ]
    line = [1,1,1,3]
    field_drawn = [
        [0,0,0],
        [0,1,0],
        [0,1,0],
        [0,1,0],
    ]

    assert aoc.draw_line_in_field(field, line) == field_drawn


def test_draw_line_long(example1):
    coordinates = aoc.convert_to_coordinates(example1)
    max_x, max_y = aoc.get_max_coords(coordinates)
    assert max_x == 9
    assert max_y == 9
    field = aoc.get_field(max_x, max_y)
    assert len(field) == 10
    assert len(field[0]) == 10
    line = [0,9,5,9]
    field_drawn = [
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [1,1,1,1,1,1,0,0,0,0],
    ]

    assert aoc.draw_line_in_field(field, line) == field_drawn


def test_draw_line_long_overlap(example1):
    coordinates = aoc.convert_to_coordinates(example1)
    max_x, max_y = aoc.get_max_coords(coordinates)
    assert max_x == 9
    assert max_y == 9
    field = aoc.get_field(max_x, max_y)
    assert len(field) == 10
    assert len(field[0]) == 10
    line = [0,9,5,9]
    field_drawn = [
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [1,1,1,1,1,1,0,0,0,0],
    ]

    new_field = aoc.draw_line_in_field(field, line)

    assert new_field == field_drawn

    line2 = [0,9,2,9]
    new_field = aoc.draw_line_in_field(field_drawn, line2)
    field_drawn = [
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [2,2,2,1,1,1,0,0,0,0],
    ]

    assert new_field == field_drawn

    line = [2,2,2,1]
    new_field = aoc.draw_line_in_field(field_drawn, line)
    field_drawn = [
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,1,0,0,0,0,0,0,0],
        [0,0,1,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [2,2,2,1,1,1,0,0,0,0],
    ]

    assert new_field == field_drawn

    line = [8,0,0,8]
    new_field = aoc.draw_line_in_field(field_drawn, line)
    # No change, because diagonal
    field_drawn = [
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,1,0,0,0,0,0,0,0],
        [0,0,1,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [2,2,2,1,1,1,0,0,0,0],
    ]

    assert new_field == field_drawn


def test_draw_lines_example1(example1):
    coordinates = aoc.convert_to_coordinates(example1)
    max_x, max_y = aoc.get_max_coords(coordinates)
    field = aoc.get_field(max_x, max_y)
    assert len(field) == 10
    assert len(field[0]) == 10
    field_drawn = [
        [0,0,0,0,0,0,0,1,0,0,],
        [0,0,1,0,0,0,0,1,0,0,],
        [0,0,1,0,0,0,0,1,0,0,],
        [0,0,0,0,0,0,0,1,0,0,],
        [0,1,1,2,1,1,1,2,1,1,],
        [0,0,0,0,0,0,0,0,0,0,],
        [0,0,0,0,0,0,0,0,0,0,],
        [0,0,0,0,0,0,0,0,0,0,],
        [0,0,0,0,0,0,0,0,0,0,],
        [2,2,2,1,1,1,0,0,0,0,],
    ]

    f = aoc.draw_all_lines_in_field(field, coordinates)
    print(f)
    assert f == field_drawn

def test_intersections():
    field_drawn = [
        [0,0,0,0,0,0,0,1,0,0,],
        [0,0,1,0,0,0,0,1,0,0,],
        [0,0,1,0,0,0,0,1,0,0,],
        [0,0,0,0,0,0,0,1,0,0,],
        [0,1,1,2,1,1,1,2,1,1,],
        [0,0,0,0,0,0,0,0,0,0,],
        [0,0,0,0,0,0,0,0,0,0,],
        [0,0,0,0,0,0,0,0,0,0,],
        [0,0,0,0,0,0,0,0,0,0,],
        [2,2,2,1,1,1,0,0,0,0,],
    ]

    assert aoc.get_intersections(field_drawn) == 5


def test_part1_example1(example1):
    """Test part 1 on example input"""
    # TODO: Change expected solution for part 1
    assert aoc.part1(example1) == 5


@pytest.mark.skip("Not implemented yet.")
def test_parse_example2(example2):
    """Test that input is parsed properly"""
    assert len(example2) > 0
    assert example2 == [
        # TODO: Add expected lines for example2.txt
    ]

def test_is_45_deg():
    line = [8,0,0,8]
    assert aoc.is_45_deg(line) == True

    line = [1,1,3,3]
    assert aoc.is_45_deg(line) == True

    line = [9,7,7,9]
    assert aoc.is_45_deg(line) == True

    line = [6,4,2,0]
    assert aoc.is_45_deg(line) == True

def test_is_not_45_deg():
    line = [1,1,1,3]
    assert aoc.is_45_deg(line) == False


def test_draw_line_long_diagonal(example1):
    coordinates = aoc.convert_to_coordinates(example1)
    max_x, max_y = aoc.get_max_coords(coordinates)
    assert max_x == 9
    assert max_y == 9
    field = aoc.get_field(max_x, max_y)
    assert len(field) == 10
    assert len(field[0]) == 10
    line = [6,4,2,0]
    field_drawn = [
        [0,0,1,0,0,0,0,0,0,0],
        [0,0,0,1,0,0,0,0,0,0],
        [0,0,0,0,1,0,0,0,0,0],
        [0,0,0,0,0,1,0,0,0,0],
        [0,0,0,0,0,0,1,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
    ]

    assert aoc.draw_line_in_field(field, line, draw_diagonal=True) == field_drawn

def test_draw_diagonal():
    field = [
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0],
    ]
    line = [0,0,2,2]
    field_drawn = [
        [1,0,0],
        [0,1,0],
        [0,0,1],
        [0,0,0],
    ]

    assert aoc.draw_line_in_field(field, line, draw_diagonal=True) == field_drawn


def test_draw_example2(example1):
    """Test part 2 on example input"""
    # TODO: Change expected solution for part 2
    field_drawn = [
        [1,0,1,0,0,0,0,1,1,0,],
        [0,1,1,1,0,0,0,2,0,0,],
        [0,0,2,0,1,0,1,1,1,0,],
        [0,0,0,1,0,2,0,2,0,0,],
        [0,1,1,2,3,1,3,2,1,1,],
        [0,0,0,1,0,2,0,0,0,0,],
        [0,0,1,0,0,0,1,0,0,0,],
        [0,1,0,0,0,0,0,1,0,0,],
        [1,0,0,0,0,0,0,0,1,0,],
        [2,2,2,1,1,1,0,0,0,0,],
    ]
    coordinates = aoc.convert_to_coordinates(example1)
    max_x, max_y = aoc.get_max_coords(coordinates)
    field = aoc.get_field(max_x, max_y)
    assert len(field) == 10
    assert len(field[0]) == 10
    f = aoc.draw_all_lines_in_field(field, coordinates, draw_diagonal=True)
    print(f)
    assert f == field_drawn
    #assert aoc.get_intersections(field_drawn) == 12


def test_part2_example2(example1):
    """Test part 2 on example input"""
    # TODO: Change expected solution for part 2

    assert aoc.part2(example1) == 12
